#!/usr/bin/env python2.7
# coding: utf-8
"""Commit Message Review"""
import sys
from types import FunctionType
from utils import parse_commit_message

HANDLERS = {
    'check_trac_link': {},
}


def check_trac_link(message):

    parseds = parse_commit_message(message)
    if not parseds and '##' not in message:
        return """[ERROR] Your commit message must contain a reference to a ticket using for example: refs trac_name #123
If you really want to bypass this check add ## in your commit message.""", False
    return "Ok", True


def main(message):
    error = False
    for handler_name in HANDLERS:
        handler = globals()[handler_name]
        if isinstance(handler, FunctionType):
            HANDLERS[handler_name]['result'], status = handler(message)
            if status is False:
                error = True
    if error is True:
        message_file = open('.git/COMMIT_LASTFAILED', 'w')
        message_file.write(message)
        message_file.close()
        print "*" * 34, "\n{:*^34}\n".format(" CHECK COMMIT IS FAILED "), "*" * 34
        for handler_name in HANDLERS:
            print "> {}:".format(handler_name)
            print ">>", HANDLERS[handler_name]['result']
        sys.exit(1)


def extract_commit_message(message_file):
    message_text = message_file.readlines()
    extracted_message = ""
    for line in message_text:
        if "7==========>" in line:
            return extracted_message
        extracted_message = extracted_message + line
    return extracted_message


if __name__ == "__main__":
    message_filename = sys.argv[1]
    message_file = open(message_filename, 'r')
    extracted_message = extract_commit_message(message_file)
    main(extracted_message)
